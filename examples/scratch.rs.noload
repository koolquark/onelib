

#[cfg(test)]
mod tests {
    use std::{collections::HashMap, io::Read};

    use reqwest::Certificate;
    use serde::Deserialize;

    use self::utils::load_config;

    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    
    #[derive(Debug, Deserialize)]
    struct NamedCertString(String, String);

    #[derive(Debug)]
    struct NamedCert(String, Certificate);

    #[derive(Debug, Deserialize)]
    struct Config {
        pub pem_cacerts: Vec<HashMap<String, String>>, 
        #[serde(skip)]
        pub cacerts: Vec<NamedCert>
    }

    #[test]
    fn test_add_cacert() {
        // let config_path = std::env::var("CONFIG_PATH").unwrap();
        // let mut config_file = std::fs::File::open(config_path).expect("Failed to open config file");
        // let mut config_data = String::new();
        // config_file.read_to_string(&mut config_data).expect("Failed to read config file");
    
        // let  config: Config = serde_yaml::from_str(&config_data)
        //     .expect("Failed to parse config file");

        let config = load_config::<Config>("CONFIG_PATH");

        // for ncs in config.pem_cacerts { 
        //     let name = ncs.get("name".into()).unwrap(); 
        //     let cert = ncs.get("data".into()).unwrap();
        //     let c: Certificate = Certificate::from_pem(cert.as_bytes()).unwrap();
        //     config.cacerts.push(NamedCert(name.to_owned(), c));
        // }
        // config.pem_cacerts = vec![];
    }


}